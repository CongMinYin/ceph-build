---

- name: check if ceph repo exists
  stat: path='./ceph'
  register: 'ceph_repo'

- name: clone the ceph repository
  git:
    repo: https://github.com/ceph/ceph
    remote: upstream
    dest: ceph
    accept_hostkey: yes
  when: ceph_repo.stat.exists is defined and ceph_repo.stat.exists == false

- name: fetch upstream
  command: git fetch upstream -v chdir=ceph

- name: "check if {{ branch }}-release branch exists"
  command: git ls-remote --heads upstream {{ branch }}-release chdir=ceph
  register: release_branch_exists

- name: "create {{ branch }}-release branch"
  command: git checkout -b {{ branch }}-release {{ branch }} chdir=ceph
  when: '"{{ branch }}" not in release_branch_exists.stdout'

- name: "push new {{ branch }}-release branch"
  command: git push -f origin {{ branch }}-release chdir=ceph
  when: '"{{ branch }}" not in release_branch_exists.stdout'

- name: "force git checkout {{ branch }}-release branch"
  command: git checkout -f {{ branch }}-release chdir=ceph

- name: reset --hard to upstream
  command: git reset --hard upstream/{{ branch }} chdir=ceph
  ignore_errors: yes
  when:
    - clean
    - not hotfix|bool

- name: git submodule update
  command: git submodule update --init chdir=ceph

- name: check if CMakeLists.txt exists
  stat: path=ceph/CMakeLists.txt
  register: cmake_lists

- name: replace the version in CMakeLists.txt
  lineinfile: dest=ceph/CMakeLists.txt
              regexp='^  VERSION \d+\.\d+\.\d+$'
              line='  VERSION {{ version }}'
  when: cmake_lists.stat.exists

- include: release/candidate.yml
  when: "release in ['candidate', 'rc']"

- include: release/development.yml
  when: "release == 'development'"

- include: release/stable.yml
  when: "release == 'stable'"

- name: commit the version changes
  command: git commit -a -m "{{ version }}" chdir=ceph

- name: clear the previous local tag
  command: git tag -d v{{ version }} chdir=ceph
  ignore_errors: yes
  when: clean

- name: clear the previous remote tag
  command: git push upstream :v{{ version }} chdir=ceph
  ignore_errors: yes
  when: clean

  # from script: /srv/ceph-build/tag_release.sh
- name: tag the version
  # we used to sign releases like:
  # GNUPGHOME=~/build/gnupg.ceph-release
  # git tag -s "v{{ version }}"  -u 17ED316D -m "v{{ version }}" chdir=ceph
  command: git tag "v{{ version }}" -m "v{{ version }}" chdir=ceph

  # 'origin' in this case is ceph-releases, since this is our fork/copy of the
  # official ceph repo it is ok to forcefully push "losing" changes. This may
  # come up if we need to re-do a release which means doing a fresh commit to
  # the debian changelog and rpm files and tagging.
- name: "force push version commit to working and release {{ branch }} branch"
  command: git push -f upstream {{ branch }}-release chdir=ceph

- name: "force push the version commit to the {{ branch }} branch"
  command: git push -f upstream {{ branch }}-release:{{ branch }} chdir=ceph

- name: push the newly created tag
  command: git push upstream v{{ version }} chdir=ceph
